// Функция генерирует договор из передаваемых параметров и провод через состояния указанные в параметре
// Параметры:
// л_ТипДоговора            - СправочникСсылка.ТипыОбъектов - Тип создаваемого договора
// л_ДатаДоговора           - Дата                          - Дата создания договора
// л_РеквезитыДоговора      - Структура                     - Структура, в которой содержатся реквезиты, определяемые типом договора
//															   смотри вкладка Характеристики (все что не имеет характеристик)
// л_ТабличныеЧастиДоговора - Структра                      - Структура,  в которой содержатся табличные части, определяемые типом договора
//															   смотри вкладка Характеристики (все что имеет характеристики не группа)
// л_СостоянияДоговора      - Массив                        - последовательность состояний договора (по умолчанию проводится в проект)
// л_Номер                  - Строка                        - Номер договра(передается если договор переностится из другой базы)
//
// Возвращаемое значение:
// СправочникСсыла.Объекты   - СозданныйДоговор
//
Функция СоздатьДоговор(л_ТипДоговора, л_ДатаДоговора ,л_РеквезитыДоговора, л_СостоянияДоговора=Неопределено,л_Номер = Неопределено) Экспорт
	л_Договор = Справочники.Объекты.СоздатьЭлемент();//Создаем объект договора
	л_Договор.ДатаДоговора = л_ДатаДоговора;//Заполняем дату создания
	л_Договор.ТипОбъекта = л_ТипДоговора;//Заполняем тип договора
	л_СсылкаНаОбъект = Справочники.Объекты.ПолучитьСсылку();//Получем ссылку на договор
	л_Договор.УстановитьСсылкуНового(л_СсылкаНаОбъект);//Устанавливаем ссылку в объект
	л_Договор.Ответственный = ПользователиКлиентСервер.ТекущийПользователь();//Устанавливаем ответственного
	л_ЗначенияРеквизитов = Новый ТаблицаЗначений;//Задаем таблицу данных договора
	л_ЗначенияРеквизитов.Колонки.Добавить("Характеристика",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ХарактеристикиОбъектов"));
	л_ЗначенияРеквизитов.Колонки.Добавить("Значение");
	л_ЗначенияРеквизитов.Колонки.Добавить("GUIDСтроки",Новый ОписаниеТипов("УникальныйИдентификатор"));
	л_ЗначенияРеквизитов.Колонки.Добавить("GUIDРодителя",Новый ОписаниеТипов("УникальныйИдентификатор"));
	л_ЗначенияРеквизитов.Колонки.Добавить("ИмяРеквизита",Новый ОписаниеТипов("Строка", ,
														 Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
	л_ХарактеристикиТипаДогвора = л_ТипДоговора.Характеристики.Выгрузить();//Получаем возможные характеристики договора
	Для каждого л_стр из л_РеквезитыДоговора Цикл//Заполняем таблицу данных договора
		л_НайденныеСтроки = л_ХарактеристикиТипаДогвора.Найти(ПланыВидовХарактеристик.ХарактеристикиОбъектов.НайтиПоНаименованию(л_стр.Ключ,Истина), "Характеристика");//Проверяем наличие характеристики у данного типа
		Если л_НайденныеСтроки = Неопределено Тогда//Если характеристики нет сообщаем об этом и возвращаем пустую ссылку
			Сообщить("Неверное имя характеристики "+л_стр.Ключ);
			Возврат Справочники.Объекты.ПустаяСсылка();
		Иначе
			//Если характеристика таблица то заносим данные как таблицу
			Если ЗначениеЗаполнено(л_НайденныеСтроки.Характеристика.ВидОтображения) и л_НайденныеСтроки.Характеристика.ВидОтображения = Перечисления.ВидыОтображения.Таблица Тогда
				//Вносим строку реквезита таблицы
				л_GUIDТаблицы = Новый УникальныйИдентификатор();
				л_стрТабЧасти = л_ЗначенияРеквизитов.Добавить();
				л_стрТабЧасти.Характеристика = л_НайденныеСтроки.Характеристика;
				л_стрТабЧасти.GUIDСтроки = л_GUIDТаблицы;
				л_стрТабЧасти.ИмяРеквизита = "Реквизит_"+л_стр.Ключ;
				л_ид = 1;
				л_ТипыХарактеристикТаблицы = л_НайденныеСтроки.Характеристика.Характеристики.Выгрузить();
				Для каждого л_стрТЧ из л_стр.Значение Цикл //Вносим строки таблицы
					л_GUIDСтроки = Новый УникальныйИдентификатор;
					л_стрТабЧасти = л_ЗначенияРеквизитов.Добавить();
					л_стрТабЧасти.Характеристика = ПланыВидовХарактеристик.ХарактеристикиОбъектов.НомерСтроки;
					л_стрТабЧасти.Значение = л_ид;
					л_стрТабЧасти.GUIDСтроки = л_GUIDСтроки;
					л_стрТабЧасти.GUIDРодителя = л_GUIDТаблицы;
					л_стрТабЧасти.ИмяРеквизита = "Реквизит_НомерСтроки";
					Для каждого л_стрКолонкаТЧ из л_стрТЧ Цикл//Вносим поля строки табличной части
						л_НайденныеСтроки = л_ТипыХарактеристикТаблицы.Найти(ПланыВидовХарактеристик.ХарактеристикиОбъектов.НайтиПоНаименованию(л_стрКолонкаТЧ.Ключ,Истина), "Характеристика");//Получаем характеристики строк таблицы
						Если л_НайденныеСтроки = Неопределено Тогда//Если характеристики нет сообщаем об этом и возвращаем пустую ссылку
							Сообщить("Неверное имя характеристики табличной части "+л_стрКолонкаТЧ.Ключ);
							Возврат Справочники.Объекты.ПустаяСсылка();
						Иначе
							л_стрТабЧасти = л_ЗначенияРеквизитов.Добавить();
							л_стрТабЧасти.Характеристика = л_НайденныеСтроки.Характеристика;
							л_стрТабЧасти.Значение = л_стрКолонкаТЧ.Значение;
							л_стрТабЧасти.GUIDСтроки = Новый УникальныйИдентификатор;
							л_стрТабЧасти.GUIDРодителя = л_GUIDСтроки;
							л_стрТабЧасти.ИмяРеквизита = "Реквизит_"+л_стрКолонкаТЧ.Ключ;
						КонецЕсли;
					КонецЦикла;
					л_ид = л_ид+1;
				КонецЦикла;
			Иначе//Вносим реквезит
			л_стрТабЧасти = л_ЗначенияРеквизитов.Добавить();
			л_стрТабЧасти.Характеристика = л_НайденныеСтроки.Характеристика;
			л_стрТабЧасти.Значение = л_стр.Значение;
			л_стрТабЧасти.GUIDСтроки = Новый УникальныйИдентификатор();
			л_стрТабЧасти.ИмяРеквизита = "Реквизит_"+л_стр.Ключ;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если л_Номер = Неопределено Тогда//Если не передан номер создаем номер и заполняем, иначе заполняем переданным номером
		л_Договор.НомерДоговора = СформироватьНомерДоговора(л_СсылкаНаОбъект, л_ТипДоговора, л_ДатаДоговора, л_ЗначенияРеквизитов);
	Иначе
		л_Договор.НомерДоговора = л_Номер;
	КонецЕсли;
	УстановитьНаименованиеОбъекта(л_Договор, л_Договор, л_ЗначенияРеквизитов);//Устанавливаем наименование договора
	Для каждого л_стр из л_ХарактеристикиТипаДогвора Цикл
		Если л_ЗначенияРеквизитов.Найти(л_стр.Характеристика,"Характеристика") = Неопределено Тогда
			л_стрТабЧасти = л_ЗначенияРеквизитов.Добавить();
			л_стрТабЧасти.Характеристика = л_стр.Характеристика;
			л_стрТабЧасти.GUIDСтроки = Новый УникальныйИдентификатор;
			л_стрТабЧасти.ИмяРеквизита = "Реквизит_"+л_стр.Характеристика.Наименование;
		КонецЕсли;
	КонецЦикла;
	Для Каждого л_стр из л_ЗначенияРеквизитов Цикл//Переносим данные из таблицы данных договора в табличную часть договора
		л_ДогСтр = л_Договор.ВерсионированиеЗначенияХарактеристик.Добавить();
		ЗаполнитьЗначенияСвойств(л_ДогСтр, л_стр);
		л_ДогСтр.ТекстоваяСтрока = Строка(л_стр.Значение);
	КонецЦикла;
	л_Договор.Записать();//Записываем договор
	л_СписокПолей = "Обучающийся, ИсточникФинансирования, УчебныйПлан, ДатаНачала, ДатаОкончания, СтоимостьОбучения, ДоговорОснование, ТипПлатежа, РасчетСуммыОплаты";//Поля получаемых из договора данных
	л_ПсевдоФорма = Новый Структура;//Создаем структуру с полями идентичными по имени полям формы, в которых хранятся реквезиты
	Для каждого л_стр из л_ЗначенияРеквизитов Цикл// Заполняем ранее созданную структуру
		Если л_стр.ИмяРеквизита<>"" Тогда
			л_ПсевдоФорма.Вставить(л_стр.ИмяРеквизита, л_стр.Значение);
		КонецЕсли;
	КонецЦикла;
	л_ДанныеДоговора = ПолучитьСтруктуруЗначенийРеквизитовОбъектаСУчетомВозможногоПрефикса(л_СписокПолей, л_ПсевдоФорма);//Получаем данные договора
	Если ТипЗнч(л_СостоянияДоговора)<>Тип("Массив") Тогда//Если не передана цепочка состояний договора то переводим в проект
		ДоговорыСервер.ИзменитьСостояниеДоговора(л_Договор.Ссылка, л_ДанныеДоговора, Справочники.ТипыСостоянийДокументов.Проект, Ложь, Истина, Истина);
	Иначе//Если передана то проводим по цепочке состояний
		Для каждого л_стр из л_СостоянияДоговора Цикл
			Если ТипЗнч(л_стр)<>ТипЗнч(Справочники.ТипыСостоянийДокументов.Проект)Тогда//Если в цепочке есть элементы не являющиеся состоянием договора то удаляем их
				л_СостоянияДоговора.Удалить(л_СостоянияДоговора.Найти(л_стр));
			КонецЕсли;
		КонецЦикла;
		
		Если л_СостоянияДоговора.Количество()=0 Тогда//Если не осталось элементов цепочки, то переводим в проект, иначе проводим по цепочке договор
			ДоговорыСервер.ИзменитьСостояниеДоговора(л_Договор.Ссылка, л_ДанныеДоговора, Справочники.ТипыСостоянийДокументов.Проект, Ложь, Истина, Истина);
		Иначе
			Для каждого л_стр из л_СостоянияДоговора Цикл
				ДоговорыСервер.ИзменитьСостояниеДоговора(л_Договор.Ссылка, л_ДанныеДоговора, л_стр, Ложь, Истина, Истина);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Возврат л_Договор.Ссылка;//Возвращаем договор
КонецФункции // СоздатьДоговор()

// Вносит изменения в табличную часть "ВерсионированиеЗначенияХарактеристик" объекта проводит по указанным состояниям,
// если у типа объекта включено использование состояний, 
// то производится проведение по указанным состояниям
// Параметры:
// л_СсылкаНаОбъект                          - СправочникСсылка.Объект - Ссылка на объект в котором надо изменить данные
// л_ИзмененияВОбъекте                       - Структура               - Структура, где ключ это наименование изменяемой характеристики,
//																		 а значение это новвое значение характеристики
// л_ЦепочкаСостояний (необязательный)       - Массив                  - это последовательное пречисление состояний через,
//																		 которое будет нроведён объект при изменении если включена поддержка состояний в типе объекта,
//																		 если поддеожка включена, а состояния не переданы, 
//																		 то возращенный объект будет в том же состоянии что и до передачи в функцию
// ИспользоватьОбменДанными (необязательный) - Булево                  - Указание на использование механизма обмена данными
//
// Возвращаемое значение:
//   СправочникСсылка.Объект - Ссылка на измененный договор
//
Функция ИзменитьДоговор(л_СсылкаНаОбъект, л_ИзмененияВОбъекте, л_ЦепочкаСостояний = Неопределено,ИспользоватьОбменДанными = Ложь) Экспорт
	л_ВозвращаемоеЗначение = л_СсылкаНаОбъект.ПолучитьОбъект();//Получаем изменяемый объект
	л_ПоддерживаетСостояния = л_ВозвращаемоеЗначение.ТипОбъекта.ИспользоватьСостояния;//Проверяем есть ли у объекта состояния
	л_ТекущееСостояниеОбъекта = Неопределено;//Переменная для текущего значения договора
	л_НачальноесостояниеОъекта = Неопределено;//Переменная для начального значения договора
	Если л_ПоддерживаетСостояния Тогда//Если договор поддерживает состояния, то получаем все необходимые состояния
		л_НачальноесостояниеОъекта = л_ВозвращаемоеЗначение.ТипОбъекта.НачальноеСостояниеТипаОбъекта;//Получаем начальное состояния для данного типа
		Если л_ЦепочкаСостояний = Неопределено Тогда//Если не передана цепочка состояний, то получаем текущее состояние
			л_СрезПоследнихСостояний = РегистрыСведений.СостоянияДокументов.СрезПоследних(ТекущаяДата(),Новый Структура("Объект", л_СсылкаНаОбъект));
			Если л_СрезПоследнихСостояний.Количество()>0 Тогда
				л_ТекущееСостояниеОбъекта = л_СрезПоследнихСостояний[0].Состояние;
			Иначе
				л_ТекущееСостояниеОбъекта = л_ВозвращаемоеЗначение.ТипОбъекта.НачальноеСостояниеТипаОбъекта;//Если нет текщего состояния, то берём начальное
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если л_ВозвращаемоеЗначение = Неопределено Тогда//Если не удалось получить объект по ссылке, то сообщаем об этом и возвращаем изначальную ссылку
		Сообщить("Объект, на который была передана ссылка удалён ни каких действй не проводилось");
		Возврат л_СсылкаНаОбъект;
	Иначе
		л_ЗначенияРеквизитов = л_ВозвращаемоеЗначение.ВерсионированиеЗначенияХарактеристик.Выгрузить();//Получаем табличную часть договора
		л_ЗначенияРеквизитов.Колонки.Добавить("ИмяРеквизита",Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));//Добавляем колонку для имени реквезита
		Для каждого л_стр_рек из л_ЗначенияРеквизитов Цикл//Заполняем созданную колонку
			л_стр_рек.ИмяРеквизита = "Реквизит_"+л_стр_рек.Характеристика.Наименование;
		КонецЦикла;
		Если л_ПоддерживаетСостояния Тогда//Если поддерживает состояния то переводим договор в начальное состояние
			л_СписокПолей = "Обучающийся, ИсточникФинансирования, УчебныйПлан, ДатаНачала, ДатаОкончания, СтоимостьОбучения, ДоговорОснование, ТипПлатежа, РасчетСуммыОплаты";
			л_ПсевдоФорма = Новый Структура;//Создаем структуру с полями идентичными по имени полям формы, в которых хранятся реквезиты
			Для каждого л_стр из л_ЗначенияРеквизитов Цикл
				Если л_стр.ИмяРеквизита<>"" Тогда// Заполняем ранее созданную структуру
					л_ПсевдоФорма.Вставить(л_стр.ИмяРеквизита, л_стр.Значение);
				КонецЕсли;
			КонецЦикла;
			л_ДанныеДоговора = ПолучитьСтруктуруЗначенийРеквизитовОбъектаСУчетомВозможногоПрефикса(л_СписокПолей, л_ПсевдоФорма);// получаем данные для изменения состояния
			ДоговорыСервер.ИзменитьСостояниеДоговора(л_СсылкаНаОбъект, л_ДанныеДоговора, л_НачальноесостояниеОъекта, Ложь, Истина, Истина);// переводим договор в начальное состояние
		КонецЕсли;
		Для каждого л_стр из л_ИзмененияВОбъекте Цикл//Обходим все изменяемые реквезиты
			л_Характеристика = ПланыВидовХарактеристик.ХарактеристикиОбъектов.НайтиПоНаименованию(л_стр.Ключ,Истина);//получаем характеристику
			Если ЗначениеЗаполнено(л_Характеристика.ВидОтображения) и л_Характеристика.ВидОтображения = Перечисления.ВидыОтображения.Таблица Тогда//Если это таблица, то заменяем её со всеми связанными характеристиками
				л_НайденныеТабличныеЧасти = л_ЗначенияРеквизитов.НайтиСтроки(Новый Структура("Характеристика",л_Характеристика));//Находим строку с характеристикой таблицы
				Для каждого л_стр1 из л_НайденныеТабличныеЧасти Цикл
					Если л_стр1.GUIDРодителя = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000") Тогда
						л_GUIDТаблицы = л_стр1.GUIDСтроки;
						л_НайденныеСтрокиТаблицы = л_ЗначенияРеквизитов.НайтиСтроки(Новый Структура("GUIDРодителя",л_GUIDТаблицы));//Находим строку с характеристикой строки таблицы
						Для каждого л_стр2 из л_НайденныеСтрокиТаблицы Цикл
							л_GUIDСтроки = л_стр2.GUIDСтроки;
							л_НайденныеПоляСтрокиТаблицы = л_ЗначенияРеквизитов.НайтиСтроки(Новый Структура("GUIDРодителя",л_GUIDСтроки));//Находим строку с характеристикой поля строки таблицы
							Для каждого л_стр3 из л_НайденныеПоляСтрокиТаблицы Цикл
								л_ЗначенияРеквизитов.Удалить(л_стр3);//Удаляем строку с характеристикой поля строки таблицы
							КонецЦикла;
							л_ЗначенияРеквизитов.Удалить(л_стр2);//Удаляем строку с характеристикой строки таблицы
						КонецЦикла;
						л_ЗначенияРеквизитов.Удалить(л_стр1);//Удаляем строку с характеристикой табличной части
					КонецЕсли;
				КонецЦикла;
				л_GUIDТаблицы = Новый УникальныйИдентификатор();//Заносим значение аналогично с тем как заносим значение при создании договора
				л_стрТабЧасти = л_ЗначенияРеквизитов.Добавить();
				л_стрТабЧасти.Характеристика = л_Характеристика;
				л_стрТабЧасти.GUIDСтроки = л_GUIDТаблицы;
				л_стрТабЧасти.ИмяРеквизита = "Реквизит_"+л_стр.Ключ;
				л_ид = 1;
				Для каждого л_СтрНовойТаблицы из л_стр.Значение Цикл
					л_GUIDСтроки = Новый УникальныйИдентификатор;
					л_стрТабЧасти = л_ЗначенияРеквизитов.Добавить();
					л_стрТабЧасти.Характеристика = ПланыВидовХарактеристик.ХарактеристикиОбъектов.НомерСтроки;
					л_стрТабЧасти.Значение = л_ид;
					л_стрТабЧасти.GUIDСтроки = л_GUIDСтроки;
					л_стрТабЧасти.GUIDРодителя = л_GUIDТаблицы;
					л_стрТабЧасти.ИмяРеквизита = "Реквизит_НомерСтроки";
					Для каждого л_стрПоляСтроки из л_СтрНовойТаблицы Цикл
						л_ХарактеристикаПоляТЧ = ПланыВидовХарактеристик.ХарактеристикиОбъектов.НайтиПоНаименованию(л_стрПоляСтроки.Ключ,Истина);
						л_стрТабЧасти = л_ЗначенияРеквизитов.Добавить();
						л_стрТабЧасти.Характеристика = л_ХарактеристикаПоляТЧ;
						л_стрТабЧасти.Значение = л_стрПоляСтроки.Значение;
						л_стрТабЧасти.GUIDСтроки = Новый УникальныйИдентификатор;
						л_стрТабЧасти.GUIDРодителя = л_GUIDСтроки;
						л_стрТабЧасти.ИмяРеквизита = "Реквизит_"+л_стрПоляСтроки.Ключ;
					КонецЦикла;
					л_ид = л_ид + 1;
				КонецЦикла;
			Иначе//Иначе заменяем значение реквезита
				л_НайденныеРеквизиты = л_ЗначенияРеквизитов.НайтиСтроки(Новый Структура("Характеристика",л_Характеристика));
				Для каждого л_стр1 из л_НайденныеРеквизиты Цикл
					Если л_стр1.GUIDРодителя = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000") Тогда
						л_стр1.Значение = л_стр.Значение;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		л_ВозвращаемоеЗначение.ВерсионированиеЗначенияХарактеристик.Очистить();//Удаляем старые данные
		л_ВозвращаемоеЗначение.ВерсионированиеЗначенияХарактеристик.Загрузить(л_ЗначенияРеквизитов);//Загружаем новые данные
		Если ИспользоватьОбменДанными =Истина Тогда//Если надо использовать обмен данными, то включаем его
			л_ВозвращаемоеЗначение.ОбменДанными.Загрузка = Истина;
		КонецЕсли;
		л_ПсевдоФорма = Новый Структура;//Создаем структуру с полями идентичными по имени полям формы, в которых хранятся реквезиты
		Для каждого л_стр из л_ЗначенияРеквизитов Цикл// Заполняем ранее созданную структуру
			Если л_стр.ИмяРеквизита<>"" Тогда
				л_ПсевдоФорма.Вставить(л_стр.ИмяРеквизита, л_стр.Значение);
			КонецЕсли;
		КонецЦикла;
		УстановитьНаименованиеОбъекта(л_ПсевдоФорма, л_ВозвращаемоеЗначение,л_ЗначенияРеквизитов);//Обновляем наименование объекта
		л_ВозвращаемоеЗначение.Записать();//Записываем объект
		Если л_ПоддерживаетСостояния Тогда //Если договор поддерживает состояния, то проводим смену всех необходимых состояний
			л_СписокПолей = "Обучающийся, ИсточникФинансирования, УчебныйПлан, ДатаНачала, ДатаОкончания, СтоимостьОбучения, ДоговорОснование, ТипПлатежа, РасчетСуммыОплаты";
			л_ПсевдоФорма = Новый Структура;//Создаем структуру с полями идентичными по имени полям формы, в которых хранятся реквезиты
			Для каждого л_стр из л_ЗначенияРеквизитов Цикл// Заполняем ранее созданную структуру
				Если л_стр.ИмяРеквизита<>"" Тогда
					л_ПсевдоФорма.Вставить(л_стр.ИмяРеквизита, л_стр.Значение);
				КонецЕсли;
			КонецЦикла;
			л_ДанныеДоговора = ПолучитьСтруктуруЗначенийРеквизитовОбъектаСУчетомВозможногоПрефикса(л_СписокПолей, л_ПсевдоФорма);// получаем данные для изменения состояния
			Если л_ЦепочкаСостояний <> Неопределено Тогда//Если предана цепочка состояний то проводим договор по ней
				Для каждого л_стрСостояние из л_ЦепочкаСостояний Цикл
					ДоговорыСервер.ИзменитьСостояниеДоговора(л_СсылкаНаОбъект, л_ДанныеДоговора, л_стрСостояние, Ложь, Истина, Истина);
				КонецЦикла;
			Иначе//Иначе Возвращаем состояние, которое было до редактированя договора
				ДоговорыСервер.ИзменитьСостояниеДоговора(л_СсылкаНаОбъект, л_ДанныеДоговора, л_ТекущееСостояниеОбъекта, Ложь, Истина, Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат л_ВозвращаемоеЗначение.Ссылка;//Возвращаем договор
КонецФункции // ИзментьДоговор()

// Функция выполняет поиск объекта по структуре поиска и возвращает массив найденных объектов
// Параметры:
// л_СтруктураПоиска   - Массив                         - массив поиска,
//														  Состоит из стркутур с двумя характеристиками:Характеристика,ЗначениеПоиска (Новый Структура("Характеристика, Значение",л_Хар,л_Знач)),
//														  если передана пустая структура поиск производится не будет
// л_ТипИскомогоОбъекта - СправочникСсылка.ТипыОбъектов - Тип искомого объекта
// Возвращаемое значение:
//   Массив - Массив найденных договоров (если не было найдено договоров вернётся пустой договор)
Функция ПоискДоговораПоОтборам(л_СтруктураПоиска, л_ТипИскомогоОбъекта=Неопределено) Экспорт
	л_ВозвращаемоеЗначение = Новый Массив;//Иничиализируем возвращаемое значение
	Если л_ТипИскомогоОбъекта <> Неопределено Тогда//Если передан тип искомых объектов проверяем характеристики на соответствие типу
		л_списокВозможныхПолей = л_ТипИскомогоОбъекта.Характеристики.ВыгрузитьКолонку("Характеристика"); //Получаем характеристики договора
		л_ПравильностьСтруктуры = Истина;//Создаем и инииализируем переменную для хранения отметки правельности стуктуры
		Для каждого л_стрСтруктПоиска из л_СтруктураПоиска Цикл//Проходим массив поиска
			л_Совпадение = Ложь;//Объявляем и инициализируем переменную для проверки совпадения характеристик
			Для каждого л_стр из л_списокВозможныхПолей  Цикл // проходим массив характеристик типа и проверяем на наличия характеристики поиска, если есть изменяем переменную л_Совпадение
				Если л_стрСтруктПоиска.Характеристика = л_стр Тогда
					л_Совпадение = Истина;
				КонецЕсли;
			КонецЦикла;
			Если не л_Совпадение Тогда//Если не найдена характеристика меняем переменную л_ПравильностьСтруктуры на ложь
				л_ПравильностьСтруктуры = ЛОЖЬ;
			КонецЕсли;
		КонецЦикла;
		Если не л_ПравильностьСтруктуры Тогда// Если структура не правильная сообщаем об этом и возвращаем пустой массив
			Сообщить("Структура поиска сформирована не верно: не все характеристики есть в данном типе договора");
			Возврат л_ВозвращаемоеЗначение;	
		КонецЕсли;
	КонецЕсли;
	Если л_СтруктураПоиска.Количество() = 0 Тогда//Если не задано фильтров возвращаем пустой массив
		Возврат л_ВозвращаемоеЗначение;
	КонецЕсли;//Начинаем собирать запрос для поиска
	л_текстЗапроса ="ВЫБРАТЬ
					|	Объекты.Ссылка КАК Ссылка
					|ИЗ
					|	Справочник.Объекты КАК Объекты";//Задаем часть запроса с выбором ссылки
	л_ид = 1;
	Для каждого л_стр из л_СтруктураПоиска Цикл//Добовляем в запрос отборы из массива отбора
		л_усл = "
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Объекты.ВерсионированиеЗначенияХарактеристик КАК СправочникОбъектыВерсионированиеЗначенияХарактеристик"+Строка(л_ид)+"
			|		ПО (Объекты.Ссылка = СправочникОбъектыВерсионированиеЗначенияХарактеристик"+Строка(л_ид)+".Ссылка
			|				И СправочникОбъектыВерсионированиеЗначенияХарактеристик"+Строка(л_ид)+".Характеристика = &Характеристика"+л_стр.Характеристика.Код+"
			|				И СправочникОбъектыВерсионированиеЗначенияХарактеристик"+Строка(л_ид)+".Значение = &Значение"+л_стр.Характеристика.Код+")";
		л_текстЗапроса= л_текстЗапроса+л_усл;
		л_ид = л_ид +1;
	КонецЦикла;
	Если л_ТипИскомогоОбъекта <> Неопределено Тогда//Если задан тип, то ограничиваем искомые значения по типу
		л_текстЗапроса = л_текстЗапроса+"
		|ГДЕ
		|Объекты.ТипОбъекта = &ТипОбъекта";
	КонецЕсли;
	л_Запрос = Новый Запрос;
	л_Запрос.Текст = л_текстЗапроса;//создаем запрос и устанавливаем сгенерированный текст запроса
	Для каждого л_стр из л_СтруктураПоиска Цикл//Устанавливаем значения поиска
		л_Запрос.УстановитьПараметр("Характеристика"+л_стр.Характеристика.Код,л_стр.Характеристика);
		л_Запрос.УстановитьПараметр("Значение"+л_стр.Характеристика.Код,л_стр.Значение);
	КонецЦикла;
	Если л_ТипИскомогоОбъекта <> Неопределено Тогда//Если передан тип, то устонавливаем в заппрос значение отбора по типу
		л_Запрос.УстановитьПараметр("ТипОбъекта",л_ТипИскомогоОбъекта);
	КонецЕсли;
	л_ВозвращаемоеЗначение = л_Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");//Выполняем запрос,выгружаем результат запроса и из выгрузки берем колонку ссылка и выгружаем её в массив
Возврат л_ВозвращаемоеЗначение;//Возвращаем найденные значения
КонецФункции // ПоискДоговораПоОтборам()

//Вспомогательная функция для работы с договорами. Генерирует номер договора вызывая для этого стандартную функцию типового реншения
// Параметры:
// л_СсылкаНаОбъект     - СправочникСсылка.Объект       - Ссылка на объект, для которого формируется номер
// л_ТипОбъекта         - СправочникСсылка.ТипыОбъектов - Ссылка на тип объекта, для которой формируется номер
// л_ДатаДоговора       - Дата                          - Дата создания договора
// л_ЗначенияРеквизитов - ТаблицаЗначений               - Данные договора
// 
// Возвращаемое значение:
// Строка - Сгенерированный номер договора
Функция СформироватьНомерДоговора(л_СсылкаНаОбъект, л_ТипОбъекта, л_ДатаДоговора, л_ЗначенияРеквизитов)
	СписокПолей = "";//Создаем переменную для списка полей
	Для Каждого ТекСтрока Из л_ЗначенияРеквизитов Цикл //Заполняем список полей
		СписокПолей = СписокПолей + ?(СписокПолей = "", "", ",") + ТекСтрока.Характеристика;
	КонецЦикла;
	ПсевдоФорма = Новый Структура;//Создаем структуру с полями идентичными по имени полям формы, в которых хранятся реквезиты
	Для каждого стр из л_ЗначенияРеквизитов Цикл// Заполняем ранее созданную структуру
		Если стр.ИмяРеквизита<>"" Тогда
			ПсевдоФорма.Вставить(стр.ИмяРеквизита, стр.Значение);
		КонецЕсли;
	КонецЦикла;
	ЗначенияХарактеристик = ПолучитьСтруктуруЗначенийРеквизитовОбъектаСУчетомВозможногоПрефикса(СписокПолей, ПсевдоФорма);// получаем данные для генерации номера
	ЗначенияХарактеристик.Вставить("ДатаДоговора", л_ДатаДоговора);//Добовляем в данные дату догвора
	Возврат ДоговорыСервер.СформироватьНомерДоговора(л_СсылкаНаОбъект.Ссылка, л_ТипОбъекта, ЗначенияХарактеристик);//Генерируем номер стандартной функцией и возвращаем
КонецФункции // СформироватьНомерДоговора()

//Вспомогательная функция для работы с договорами. Получает данные, которые должны передаватья функциями/процедурами формы в типовые функции/процедуры
// Параметры:
// СписокПолей    - Строка   - Список полей для получения (ключи выходной структуры)
// ИсходныйОбъект - Структра - Данные договора представленные в виде структуры данных с формы объекта
//
// Возвращаемое значение:
// Структра - Выбранные поля договора
Функция ПолучитьСтруктуруЗначенийРеквизитовОбъектаСУчетомВозможногоПрефикса(СписокПолей, ИсходныйОбъект)
	РезультатФункции = Новый Структура(СписокПолей);//создаем и инициализируем списком полей возвращаемую структуру
	ВспомогательнаяСтруктура = Новый Структура;//создаем вспомогательную структуру
	МассивИмен = Новый Массив;//Создаем массив для хранения имен рекывезитов
	Для Каждого ТекКлючИЗначение Из РезультатФункции Цикл//Заполняем ключи вспомогательной структуры и массива имен
		ВспомогательнаяСтруктура.Вставить(ПолучитьПрефиксИменРеквизитовФормы() + ТекКлючИЗначение.Ключ);//Добавляем во вспомогательную структуру ключи с учётом префикса
		МассивИмен.Добавить(ТекКлючИЗначение.Ключ);
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(РезультатФункции, ИсходныйОбъект);//Заполняем возвращаемую структуру данными договора
	ЗаполнитьЗначенияСвойств(ВспомогательнаяСтруктура, ИсходныйОбъект);//Заполняем вспомогательную структуру данными договора
	Для Каждого ТекЭлементМассива Из МассивИмен Цикл//Обходим все имена возвращаемой структуру
		//Проверяем наличие данных в обоих структурах и если их нет в возвращаемой структуре, но есть во вспомогательной, то переносим в основную
		Если РезультатФункции[ТекЭлементМассива] = Неопределено
			И ВспомогательнаяСтруктура[ПолучитьПрефиксИменРеквизитовФормы() + ТекЭлементМассива] <> Неопределено Тогда 
			РезультатФункции.Вставить(ТекЭлементМассива, ВспомогательнаяСтруктура[ПолучитьПрефиксИменРеквизитовФормы() + ТекЭлементМассива]);
		КонецЕсли;
	КонецЦикла;
	Возврат РезультатФункции;//Возвращаем полученные данные догвора
КонецФункции // ПолучитьСтруктуруЗначенийРеквизитовОбъектаСУчетомВозможногоПрефикса()

//Вспомогательная функция для работы с договорами. Возвращает префикс имен реквезитов формы
//
// Возвращаемое значение:
// Строка - Префикс реквезита формы
Функция ПолучитьПрефиксИменРеквизитовФормы()
	#Если Клиент Тогда
		Возврат РезультатыДеятельности.ПолучитьПрефиксИменРеквизитовФормыНаКлиенте();//Возвращаем префикс при помощи клиентской функции, если функция вызвана на клиенте
	#Иначе
		Возврат РезультатыДеятельности.ПолучитьПрефиксИменРеквизитовФормыНаСервере();//Возвращаем префикс при помощи серверной функции, если функция вызвана на сервере
	#КонецЕсли
КонецФункции // ПолучитьПрефиксИменРеквизитовФормы()

//Вспомогательная процедура для работы с договорами. Устанавливает наименование у договора
// // Параметры:
// Форма                - СправочникОбъект.Объект - Ссылка на объект, у которого устанавливается наименование
// Объект               - СправочникОбъект.Объект - Ссылка на объект, у которого устанавливается наименование
// л_ЗначенияРеквизитов - ТаблицаЗначений         - Данные договора
//
Процедура УстановитьНаименованиеОбъекта(Форма, Объект, л_ЗначенияРеквизитов)
	ПсевдоФорма = Новый Структура;//Создаем структуру с полями идентичными по имени полям формы, в которых хранятся реквезиты
	Для каждого стр из л_ЗначенияРеквизитов Цикл// Заполняем ранее созданную структуру
		Если стр.ИмяРеквизита<>"" Тогда
			ПсевдоФорма.Вставить(стр.ИмяРеквизита, стр.Значение);
		КонецЕсли;
	КонецЦикла;
	ДанныеСФормы = Неопределено;//Создаем переменную для данных с формы
	// Проверяем тип данных и в зависимости от него генерируем наименование
	Если ВспомогательныеФункцииСервер.ПринадлежитЭлементу(Объект.ТипОбъекта, Справочники.ТипыОбъектов.НайтиПоКоду("1086")) Тогда// можно добавить ещё вариантов
		ДанныеСФормы = ПолучитьСтруктуруЗначенийРеквизитовОбъектаСУчетомВозможногоПрефикса("ФизическоеЛицо", ПсевдоФорма);// получаем данные для наименование
		Объект.Наименование = "" + Объект.ТипОбъекта + " (" + ДанныеСФормы.ФизическоеЛицо + ")";//Создаем и присваиваем наименование договора
	Иначе
		ДанныеСФормы = ПолучитьСтруктуруЗначенийРеквизитовОбъектаСУчетомВозможногоПрефикса("Обучающийся", ПсевдоФорма);// получаем данные для наименование
		Объект.Наименование = "" + Объект.ТипОбъекта + " (" + ДанныеСФормы.Обучающийся + ")";//Создаем и присваиваем наименование договора
	КонецЕсли;
КонецПроцедуры // УстановитьНаименованиеОбъекта()

